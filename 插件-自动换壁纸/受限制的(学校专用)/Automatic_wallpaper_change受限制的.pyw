import sys
import requests
import json
from skimage import io
from tkinter import *
from tkinter import messagebox
import matplotlib.pyplot as plt
import os
import win32gui,win32con
import pystray
from PIL import Image
from pystray import MenuItem
from threading import Thread
import easygui
import time
import win32com.client as client
import ctypes #这个库将会用到
from shutil import move

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '托盘程序设置UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#大纲5.28
#1.将配置保存到ini文件
#2.启动时判断配置文件是否存在。
#3.不在的话打开配置界面并自动更换壁纸，在的话读取配置文件内的配置并按计划运行。


from PyQt5 import QtCore, QtGui, QtWidgets
import sys, os

user_setting = []

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(398, 779)
        MainWindow.setStyleSheet("#centralwidget{image: url(Bg.jpg);}")
        MainWindow.setFixedSize(MainWindow.width(), MainWindow.height());
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(20, 270, 191, 19))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox.setFont(font)
        self.checkBox.setStyleSheet("")
        self.checkBox.setObjectName("checkBox")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 70, 381, 101))
        font = QtGui.QFont()
        font.setFamily("钉钉进步体")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgba(255, 255, 255, 128);")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 260, 381, 391))
        font = QtGui.QFont()
        font.setFamily("钉钉进步体")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color: rgba(255, 255, 255, 128);")
        self.label_2.setObjectName("label_2")
        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2.setGeometry(QtCore.QRect(20, 300, 191, 19))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.checkBox_2.setFont(font)
        self.checkBox_2.setStyleSheet("")
        self.checkBox_2.setObjectName("checkBox_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(20, 390, 191, 19))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setStyleSheet("")
        self.radioButton_3.setGeometry(QtCore.QRect(20, 390, 361, 19))
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_4.setGeometry(QtCore.QRect(20, 420, 321, 19))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setStyleSheet("")
        self.radioButton_4.setObjectName("radioButton_4")
        self.radioButton_5 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_5.setGeometry(QtCore.QRect(20, 450, 361, 19))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setStyleSheet("")
        self.radioButton_5.setObjectName("radioButton_5")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(260, 730, 121, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(130, 730, 121, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 730, 71, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 350, 141, 31))
        font = QtGui.QFont()
        font.setFamily("钉钉进步体")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(20, 610, 361, 31))
        font = QtGui.QFont()
        font.setFamily("钉钉进步体")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("")
        self.label_4.setObjectName("label_4")
        self.label_2.raise_()
        self.checkBox.raise_()
        self.label.raise_()
        self.checkBox_2.raise_()
        self.radioButton_3.raise_()
        self.radioButton_3.setCheckable(False)
        self.radioButton_4.raise_()
        self.radioButton_5.raise_()
        self.radioButton_5.setCheckable(False)
        self.pushButton.raise_()
        self.pushButton.clicked.connect(main_function.save)
        self.pushButton_2.raise_()
        self.pushButton_2.clicked.connect(main_function.not_save)
        self.pushButton_3.raise_()
        self.pushButton_3.clicked.connect(main_function.about)
        self.label_3.raise_()
        self.label_4.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "托盘程序设置"))
        self.checkBox.setText(_translate("MainWindow", "开机自启动"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:20pt; font-weight:600; color:#000000;\">壁纸生成器 (纯净版)</span></p><p align=\"center\"><span style=\" font-size:20pt; font-weight:600; color:#000000;\">自动壁纸 - 托盘程序设置</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.checkBox_2.setText(_translate("MainWindow", "启动后自动更换壁纸"))
        self.radioButton_3.setText(_translate("MainWindow", "电脑壁纸（策略限制*）"))
        self.radioButton_4.setText(_translate("MainWindow", "星空壁纸"))
        self.radioButton_5.setText(_translate("MainWindow", "随机壁纸（策略限制*）"))
        self.pushButton.setText(_translate("MainWindow", "保存并退出"))
        self.pushButton_2.setText(_translate("MainWindow", "不保存并退出"))
        self.pushButton_3.setText(_translate("MainWindow", "关于"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; color:#000000;\">刷新的壁纸类型</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">*受策略限制，该系统不能生成此类壁纸</span></p></body></html>"))

class main_function(Ui_MainWindow):
    def about():
        messagebox.showinfo('关于','名称：壁纸生成器 2.1 AI画图插件 - 托盘自动壁纸程序\n依赖API：MirlKoiAPI\n        API源：https://dev.iw233.cn/api.php?\n        exe封装：思锐工作室\n        官网：srinternet-2.icoc.vc\n\n')

    def MakeLink2(path, target, args='', icon=',0'):
        shell = client.Dispatch('Wscript.Shell')
        link = shell.CreateShortCut(path)
        link.TargetPath = target
        link.Arguments = args
        link.IconLocation = icon
        link.save()
        print(dir(link))

    def save():
        global user_setting
        configs = []
        config = open("RefreshSetting.Sr", "w")

        # 写入自启动事件的壁纸
        if ui.checkBox.isChecked() == True:

            ProgramPath = os.path.abspath('.') + os.sep + os.path.basename(__file__)
            # if ctypes.windll.shell32.IsUserAnAdmin() == False: #检查是否是管理员权限
            #     ctypes.windll.shell32.ShellExecuteW(None,"runas", sys.executable, __file__, None, 1) #尝试自主提升权限
            # 这部分代码对下面的代码目前没有作用

            try:
                main_function.MakeLink2('AutoWpChange.lnk', ProgramPath, '', ProgramPath)
                move('AutoWpChange.lnk', 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup')
                configs.append('AutoStart')
            except Exception as e:
                if os.path.isfile("C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\AutoWpChange.lnk") == False:
                    messagebox.showerror('意外的错误',"启动项无法添加，因为权限不足，因此该条目失效。请尝试以管理员身份重新运行此程序以解决问题。详细信息：\n\n" + str(e))
                else:
                    configs.append('AutoStart')
        else:
            if os.path.isfile("C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\AutoWpChange.lnk") == True:
                try:
                    os.remove("C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\AutoWpChange.lnk")
                except Exception as re:
                    messagebox.showerror('意外的错误',"启动项无法删除，因为权限不足，因此该条目失效。请尝试以管理员身份重新运行此程序以解决问题。详细信息：\n\n" + str(re))
                    configs.append('AutoStart')


        if ui.checkBox_2.isChecked() == True:
            configs.append('AutoChange')

        # 写入壁纸生成类型的配置
        if ui.radioButton_3.isChecked() == True:
            configs.append('PC')
        elif ui.radioButton_4.isChecked() == True:
            configs.append('Starry')
        else:
            configs.append('Ran')

        print(configs)
        config.write(str(configs))
        config.close()
        user_setting = configs
        MainWindow.close()

        ProgramPath = os.path.abspath('.') + os.sep + os.path.basename(__file__)
        print(ProgramPath)

        messagebox.showinfo('已设置','配置已保存至本地，并将会立即生效')
        

    def not_save():
        MainWindow.close()
        
    

def settings():
    global MainWindow, ui, user_setting

    # 重置状态
    ui.checkBox.setChecked(False) 
    ui.checkBox_2.setChecked(False) 
    ui.radioButton_3.setChecked(False)
    ui.radioButton_4.setChecked(False)
    ui.radioButton_5.setChecked(False)
    
    if os.path.isfile("RefreshSetting.Sr") == False:
        ui.checkBox.setChecked(True)
        ui.checkBox_2.setChecked(True)
        ui.radioButton_4.setChecked(True)
    else:
        user_config = open("RefreshSetting.Sr", "r")
        user_setting = user_config.readline()
        user_config.close()

        # 根据配置修改状态
        if 'AutoStart' in user_setting:
            ui.checkBox.setChecked(True) 
        if 'AutoChange' in user_setting:
            ui.checkBox_2.setChecked(True) 

        if 'PC' in user_setting:
            ui.radioButton_3.setChecked(True)
        elif 'Starry' in user_setting:
            ui.radioButton_4.setChecked(True)
        else:
            ui.radioButton_5.setChecked(True)

    MainWindow.show()
    ui.pushButton.setFocus()
    # sys.exit(app.exec_())



def notify(icon):
    icon.notify("壁纸刷新成功", "AI画图 - 新壁纸")

def error():
    global icon
    icon.notify("壁纸刷新失败，请多次重试", "AI画图 - 未能刷新壁纸")

def handrefresh():
    global icon
    icon.notify("请等待，壁纸即将刷新", "开始")
    refresh()


def refresh():
    
    if 'PC' in user_setting:
        api = "https://dev.iw233.cn/api.php?sort=pc"
    elif 'Starry' in user_setting:
        api = "https://dev.iw233.cn/api.php?sort=xing"
    else:
        api = "https://dev.iw233.cn/api.php?sort=random"

    parameters = {
        "type": "json",
        'num': 1
    }
    global icon
    try:
        response = requests.get(api, params=parameters)
        # print(response.text())
        outputurl = json.dumps(response.json())
        print(outputurl)
        output = outputurl[10:-3]

        image = io.imread(output)
        io.imsave('wallpaper.bmp', image)
        img = plt.imread('wallpaper.bmp')
        path = os.path.abspath('.\\wallpaper.bmp')
        win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER,path, win32con.SPIF_SENDWININICHANGE)
        print(path)
        notify(icon)
    except:
        time.sleep(1)
        error()
        easygui.exceptionbox()

def end():
    os._exit(0)

app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
thr = Thread(target=refresh)
menu = (MenuItem('生成并刷新壁纸',action=handrefresh), MenuItem('打开设置', action=settings), MenuItem('退出', action=end))
image = Image.open("ico.ico")
icon = pystray.Icon("minmenu", image, "AI画图 - 每日自动刷新壁纸", menu)
if os.path.isfile("RefreshSetting.Sr") == False:
    ui.checkBox.setChecked(True)
    ui.checkBox_2.setChecked(True)
    ui.radioButton_4.setChecked(True)
    MainWindow.show()
else:
    user_config = open("RefreshSetting.Sr", "r")
    user_setting = user_config.readline()
    user_config.close()
    if 'AutoChange' in user_setting:
        thr.start()
icon.run()
